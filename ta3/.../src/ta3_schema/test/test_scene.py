# coding: utf-8

"""
    ITM TA3 API

    This is the specification of the TA3 API for In The Moment (ITM).  Currently, the Evaluation API for TA2 supports functionality for the September milestone.  The API is based on the OpenAPI 3.0 specification.

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.scene import Scene

class TestScene(unittest.TestCase):
    """Scene unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Scene:
        """Test Scene
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Scene`
        """
        model = Scene()
        if include_optional:
            return Scene(
                index = 0,
                state = openapi_client.models.state.State(
                    unstructured = '', 
                    elapsed_time = 5.2, 
                    scenario_complete = True, 
                    mission = openapi_client.models.mission.Mission(
                        unstructured = 'Place sensors in and around the jungle base', 
                        mission_type = 'Listening/Observation', 
                        character_importance = [
                            [{"Mike":"none"},{"Intelligence Officer":"priority"}]
                            ], 
                        civilian_presence = 'none', 
                        communication_capability = 'all', 
                        roe = '', 
                        political_climate = '', 
                        medical_policies = '', ), 
                    environment = openapi_client.models.environment.Environment(
                        sim_environment = openapi_client.models.sim_environment.SimEnvironment(
                            unstructured = 'It was a dark and stormy night.', 
                            type = 'jungle', 
                            weather = 'clear', 
                            terrain = 'jungle', 
                            flora = 'none', 
                            fauna = 'none', 
                            temperature = -75.0, 
                            humidity = 0.0, 
                            lighting = 'none', 
                            visibility = 'none', 
                            noise_ambient = 'none', 
                            noise_peak = 'none', ), 
                        decision_environment = openapi_client.models.decision_environment.DecisionEnvironment(
                            unstructured = 'Injuries triggered by an IED detonation.  Helicopter Evac expected in one hour for up to three casualties.', 
                            aid_delay = openapi_client.models.aid_delay.AidDelay(
                                delay = 1.0, 
                                max_transport = 1, ), 
                            movement_restriction = 'unrestricted', 
                            sound_restriction = 'unrestricted', 
                            oxygen_levels = 'normal', 
                            population_density = 0.0, 
                            injury_triggers = 'explosion', 
                            air_quality = 0, 
                            city_infrastructure = '', ), ), 
                    threat_state = {"unstructured":"Gunfire can be heard in the surrounding area","threats":[{"type":"gunfire","severity":0.5}]}, 
                    supplies = [
                        {"type":"Tourniquet","quantity":4,"reusable":false}
                        ], 
                    characters = [
                        openapi_client.models.character.Character(
                            id = 'Soldier_01', 
                            name = 'Mike', 
                            unstructured = '22 YO male Marine hit by an IED. Puncture wound on the left side of the neck.', 
                            unstructured_postassess = '22 YO male Marine hit by an IED. Puncture wound on the left side of the neck.  Burns cover about 30 of his body.', 
                            rapport = 0.0, 
                            demographics = openapi_client.models.demographics.Demographics(
                                age = 0, 
                                sex = 'M', 
                                race = '', 
                                military_disposition = 'Allied US', 
                                military_branch = 'US Army', 
                                rank = 'E-1', 
                                rank_title = 'Private (Recruit)', 
                                skills = [{"skill_type":"Combat","level":0.7},{"skill_type":"Medical","level":0.3}], 
                                role = 'Infantry', 
                                mission_importance = 'normal', ), 
                            injuries = [
                                openapi_client.models.injury.Injury(
                                    name = 'Ear Bleed', 
                                    location = 'right forearm', 
                                    severity = 0.0, 
                                    status = 'hidden', )
                                ], 
                            vitals = openapi_client.models.vitals.Vitals(
                                conscious = True, 
                                avpu = 'ALERT', 
                                ambulatory = True, 
                                mental_status = 'AGONY', 
                                breathing = 'NORMAL', 
                                hrpmin = 0, 
                                spo2 = 0.0, ), 
                            visited = True, )
                        ], ),
                end_scenario_allowed = True,
                probe_config = [
                    openapi_client.models.probe_config.ProbeConfig(
                        probe_id = '', 
                        description = '', )
                    ],
                tagging = openapi_client.models.tagging.Tagging(
                    enabled = True, 
                    repeatable = True, 
                    probe_responses = [{"character_id":"Mike","probe_id":"adept-september-demo-probe-3","minimal":"s1-p3-choice1","delayed":"s1-p3-choice2","immediate":"s1-p3-choice3","expectant":"s1-p3-choice4"}], 
                    reference = 0, ),
                action_mapping = [
                    openapi_client.models.action.Action(
                        action_id = 'action_01', 
                        action_type = 'APPLY_TREATMENT', 
                        unstructured = 'Check Mike's pulse.', 
                        repeatable = True, 
                        character_id = '', 
                        parameters = [{"treatment":"Tourniquet"},{"location":"right forearm"}], 
                        probe_id = '', 
                        choice = '', 
                        justification = 'Character is the VIP of the scenario', 
                        kdma_association = [{"Mission":0.8}], 
                        condition_semantics = 'and', 
                        conditions = openapi_client.models.conditions.Conditions(
                            elapsed_time_lt = 5, 
                            elapsed_time_gt = 5, 
                            actions = [
                                [
                                    ''
                                    ]
                                ], 
                            probes = ["adept-september-demo-probe-1"], 
                            probe_responses = ["adept-september-demo-probe-1-choice2"], 
                            character_vitals = [
                                openapi_client.models.conditions_character_vitals_inner.Conditions_character_vitals_inner(
                                    character_id = '', 
                                    vitals = openapi_client.models.vitals.Vitals(
                                        conscious = True, 
                                        avpu = 'ALERT', 
                                        ambulatory = True, 
                                        mental_status = 'AGONY', 
                                        breathing = 'NORMAL', 
                                        hrpmin = 0, 
                                        spo2 = 0.0, ), )
                                ], 
                            supplies = [{"type":"Tourniquet","quantity":1,"reusable":false}], ), )
                    ],
                restricted_actions = ["CHECK_ALL_VITALS"],
                transition_semantics = 'and',
                transitions = openapi_client.models.conditions.Conditions(
                    elapsed_time_lt = 5, 
                    elapsed_time_gt = 5, 
                    actions = [
                        [
                            ''
                            ]
                        ], 
                    probes = ["adept-september-demo-probe-1"], 
                    probe_responses = ["adept-september-demo-probe-1-choice2"], 
                    character_vitals = [
                        openapi_client.models.conditions_character_vitals_inner.Conditions_character_vitals_inner(
                            character_id = '', 
                            vitals = openapi_client.models.vitals.Vitals(
                                conscious = True, 
                                avpu = 'ALERT', 
                                ambulatory = True, 
                                mental_status = 'AGONY', 
                                breathing = 'NORMAL', 
                                hrpmin = 0, 
                                spo2 = 0.0, ), )
                        ], 
                    supplies = [{"type":"Tourniquet","quantity":1,"reusable":false}], )
            )
        else:
            return Scene(
                index = 0,
                end_scenario_allowed = True,
                action_mapping = [
                    openapi_client.models.action.Action(
                        action_id = 'action_01', 
                        action_type = 'APPLY_TREATMENT', 
                        unstructured = 'Check Mike's pulse.', 
                        repeatable = True, 
                        character_id = '', 
                        parameters = [{"treatment":"Tourniquet"},{"location":"right forearm"}], 
                        probe_id = '', 
                        choice = '', 
                        justification = 'Character is the VIP of the scenario', 
                        kdma_association = [{"Mission":0.8}], 
                        condition_semantics = 'and', 
                        conditions = openapi_client.models.conditions.Conditions(
                            elapsed_time_lt = 5, 
                            elapsed_time_gt = 5, 
                            actions = [
                                [
                                    ''
                                    ]
                                ], 
                            probes = ["adept-september-demo-probe-1"], 
                            probe_responses = ["adept-september-demo-probe-1-choice2"], 
                            character_vitals = [
                                openapi_client.models.conditions_character_vitals_inner.Conditions_character_vitals_inner(
                                    character_id = '', 
                                    vitals = openapi_client.models.vitals.Vitals(
                                        conscious = True, 
                                        avpu = 'ALERT', 
                                        ambulatory = True, 
                                        mental_status = 'AGONY', 
                                        breathing = 'NORMAL', 
                                        hrpmin = 0, 
                                        spo2 = 0.0, ), )
                                ], 
                            supplies = [{"type":"Tourniquet","quantity":1,"reusable":false}], ), )
                    ],
        )
        """

    def testScene(self):
        """Test Scene"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
